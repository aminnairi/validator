"use strict";exports.Validator=class{constructor(e){this.rules=e}validate(e){const t=Object.entries(this.rules).reduce(((t,[r,i])=>{const s=i.split("|").map((e=>e.trim())),n=e[r];return{...t,...s.reduce(((t,i)=>{if("required"===i)return null==n?{...t,[r]:[...t[r]||[],r+" is required."]}:t;if("email"===i){const e=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return"string"!=typeof n||e.test(n)?t:{...t,[r]:[...t[r]||[],r+" should be a valid email."]}}if("password"===i){const e=/(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{8,}/;return"string"!=typeof n||e.test(n)?t:{...t,[r]:[...t[r]||[],r+" should contain at least digits, lower & upper letters, symbols and at least 8 characters."]}}if(i.startsWith("same")){const[,s]=i.split(":");if(void 0===s)throw new Error('No value defined for the rule "same".');const o=s,u=e[o];return null!=n&&u!==n?{...t,[r]:[...t[r]||[],`${r} should be the same as ${o}.`]}:t}if(i.startsWith("minimum")){const[,e]=i.split(":");if(void 0===e)throw new Error('No value defined for the rule "minimum".');const s=Number(e);if(!Number.isFinite(s))throw new Error('No number defined for the rule "minimum".');const o=s,u=typeof n;if("undefined"!==u&&null!==n){if("number"==typeof n&&n<o)return{...t,[r]:[...t[r]||[],`${r} should be at least equals to ${o}.`]};if("string"===u&&n.length<o)return{...t,[r]:[...t[r]||[],`${r} should have at least ${o} characters.`]}}return t}if(i.startsWith("maximum")){const[,e]=i.split(":");if(void 0===e)throw new Error('No value defined for the rule "maximum".');const s=Number(e);if(!Number.isFinite(s))throw new Error('No number defined for the rule "maximum".');const o=s,u=typeof n;if("undefined"!==u&&null!==n){if("number"===u&&n>o)return{...t,[r]:[...t[r]||[],`${r} should be at most equals to ${o}.`]};if("string"===u&&n.length>o)return{...t,[r]:[...t[r]||[],`${r} should have at most ${o} characters.`]}}return t}if(i.startsWith("in")){const[,e]=i.split(":");if(void 0===e)throw new Error('No value defined for the rule "in".');const s=e.split(",").map((e=>e.trim()));return null==n||s.includes(n)?t:{...t,[r]:[...t[r]||[],`${r} should be one of the following: ${s.join(", ")}.`]}}throw new Error(`Unrecognized rule: ${i}.`)}),{})}}),{});return 0===Object.keys(t).length?null:t}};
