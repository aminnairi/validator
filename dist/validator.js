"use strict";exports.Validator=class{constructor(e){this.rules=e}validate(e){const t=Object.entries(this.rules).reduce(((t,[r,i])=>{const n=i.split("|").map((e=>e.trim())),s=e[r],o=n.reduce(((i,n)=>{if("required"===n)return null==s?{...i,[r]:[...i[r]||[],r+" is required."]}:i;if("integer"===n)return null==s||Number.isInteger(Number(s))?i:{...i,[r]:[...i[r]||[],r+" should be an integer."]};if("email"===n){const e=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/u;return"string"!=typeof s||e.test(s)?i:{...i,[r]:[...i[r]||[],r+" should be a valid email."]}}if("password"===n){const e=/(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{8,}/u;return"string"!=typeof s||e.test(s)?i:{...i,[r]:[...i[r]||[],r+" should contain at least digits, lower & upper letters, symbols and at least 8 characters."]}}if("date"===n)return null!=s&&Number.isNaN(Date.parse(s))?{...i,[r]:[...i[r]||[],r+" should be a valid date."]}:i;if("string"===n)return"string"!=typeof s?{...i,[r]:[...i[r]||[],r+" should be a string."]}:t;if(n.startsWith("same")){const[,t]=n.split(":");if(void 0===t)throw new Error('No value defined for the rule "same".');const o=t,u=e[o];return null!=s&&u!==s?{...i,[r]:[...i[r]||[],`${r} should be the same as ${o}.`]}:i}if(n.startsWith("different")){const[,t]=n.split(":");if(void 0===t)throw new Error('No value defined for the rule "different".');const o=t,u=e[o];return null!=s&&u===s?{...i,[r]:[...i[r]||[],`${r} should be different than ${o}.`]}:i}if(n.startsWith("minimum")){const[,e]=n.split(":");if(void 0===e)throw new Error('No value defined for the rule "minimum".');const t=Number(e);if(!Number.isFinite(t))throw new Error('No number defined for the rule "minimum".');const o=t,u=typeof s;if("undefined"!==u&&null!==s){if("number"==typeof s&&s<o)return{...i,[r]:[...i[r]||[],`${r} should be at least equals to ${o}.`]};if("string"===u&&s.length<o)return{...i,[r]:[...i[r]||[],`${r} should have at least ${o} characters.`]}}return i}if(n.startsWith("maximum")){const[,e]=n.split(":");if(void 0===e)throw new Error('No value defined for the rule "maximum".');const t=Number(e);if(!Number.isFinite(t))throw new Error('No number defined for the rule "maximum".');const o=t,u=typeof s;if("undefined"!==u&&null!==s){if("number"===u&&s>o)return{...i,[r]:[...i[r]||[],`${r} should be at most equals to ${o}.`]};if("string"===u&&s.length>o)return{...i,[r]:[...i[r]||[],`${r} should have at most ${o} characters.`]}}return i}if(n.startsWith("in")){const[,e]=n.split(":");if(void 0===e)throw new Error('No value defined for the rule "in".');const t=e.split(",").map((e=>e.trim()));return null==s||t.includes(s)?i:{...i,[r]:[...i[r]||[],`${r} should be one of the following: ${t.join(", ")}.`]}}throw new Error(`Unrecognized rule: ${n}.`)}),{});return{...t,...o}}),{});return 0===Object.keys(t).length?null:t}};
