"use strict";exports.Validator=class{constructor(e){this.rules=e}validate(e){const r=Object.entries(this.rules).reduce(((r,[t,i])=>{const n=i.split("|").map((e=>e.trim())),s=e[t];return{...r,...n.reduce(((r,i)=>{if("required"===i)return null==s?{...r,[t]:[...r[t]||[],t+" is required."]}:r;if("integer"===i)return null==s||Number.isInteger(Number(s))?r:{...r,[t]:[...r[t]||[],t+" should be an integer."]};if("email"===i){const e=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return"string"!=typeof s||e.test(s)?r:{...r,[t]:[...r[t]||[],t+" should be a valid email."]}}if("password"===i){const e=/(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*\W).{8,}/;return"string"!=typeof s||e.test(s)?r:{...r,[t]:[...r[t]||[],t+" should contain at least digits, lower & upper letters, symbols and at least 8 characters."]}}if("date"===i)return null!=s&&Number.isNaN(Date.parse(s))?{...r,[t]:[...r[t]||[],t+" should be a valid date."]}:r;if(i.startsWith("same")){const[,n]=i.split(":");if(void 0===n)throw new Error('No value defined for the rule "same".');const o=n,u=e[o];return null!=s&&u!==s?{...r,[t]:[...r[t]||[],`${t} should be the same as ${o}.`]}:r}if(i.startsWith("minimum")){const[,e]=i.split(":");if(void 0===e)throw new Error('No value defined for the rule "minimum".');const n=Number(e);if(!Number.isFinite(n))throw new Error('No number defined for the rule "minimum".');const o=n,u=typeof s;if("undefined"!==u&&null!==s){if("number"==typeof s&&s<o)return{...r,[t]:[...r[t]||[],`${t} should be at least equals to ${o}.`]};if("string"===u&&s.length<o)return{...r,[t]:[...r[t]||[],`${t} should have at least ${o} characters.`]}}return r}if(i.startsWith("maximum")){const[,e]=i.split(":");if(void 0===e)throw new Error('No value defined for the rule "maximum".');const n=Number(e);if(!Number.isFinite(n))throw new Error('No number defined for the rule "maximum".');const o=n,u=typeof s;if("undefined"!==u&&null!==s){if("number"===u&&s>o)return{...r,[t]:[...r[t]||[],`${t} should be at most equals to ${o}.`]};if("string"===u&&s.length>o)return{...r,[t]:[...r[t]||[],`${t} should have at most ${o} characters.`]}}return r}if(i.startsWith("in")){const[,e]=i.split(":");if(void 0===e)throw new Error('No value defined for the rule "in".');const n=e.split(",").map((e=>e.trim()));return null==s||n.includes(s)?r:{...r,[t]:[...r[t]||[],`${t} should be one of the following: ${n.join(", ")}.`]}}throw new Error(`Unrecognized rule: ${i}.`)}),{})}}),{});return 0===Object.keys(r).length?null:r}};
